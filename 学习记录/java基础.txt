eclipse 常用快捷键：
1.添加单行注释：Ctrl + /  ,取消：Ctrl + /
2.添加多行注释： Ctrl + Shift + / 取消： Ctrl + Shift + \
3.向上（下）快速复制一行：Ctrl + Alt + 向上（向下）
4.向上（下）移动代码：Alt + 向上（向下）
5.删除当前行：Ctrl + D (delete缩写)

6.格式化：Ctrl +Shift + F（重点！）
7.智能提示：Alt + /（重点！）

数组
【注意】：一个数组一旦在内存当中被创建了，那么数组的长度就不能发生改变。
 
java内存分配：
1.栈（Stack）：主要用来存放局部变量。重点！
2.堆（Heap）：凡是new出来的东西，都存放在堆当中。重点！
堆当中的数据有默认值规则。
3.方法区：（Method Area）:存放与.class（字节码文件）相关的信息。
4.本地方法区（Native Method Area） ：与操作系统相关。
5.寄存器（pc Register）：与CPU相关，性能极高。

方法：
参数传递的过程中，有两项规则：
1.对于基本数据类型（以及String）来说，形式参数的操作【不会】影响实际参数。
2.对于引用数据类型（除了String）来说，形式参数的操作【会】影响实际参数。

面向对象：
三大特征：封装性、继承性、多态性。
对比局部变量和成员变量：
1.定义位置不一样，
局部变量：定义在方法内部
成员变量：直接定义在类中，在方法的外面
2.内存中位置不一样
3.生命周期不一样
4.默认值不一样
局部变量：没有默认值，必须赋值之后才能使用
成员变量：有默认值

java中this（“当前对象”）关键字的作用: 将重名的成员变量和局部变量区分开。
构造方法就是专门用来创建对象的方法，当通过new关键字创建对象时，其实就是在调用构造方法。
注意：
1.构造方法不能写返回值类型，void也不写
2.构造方法的名称必须和所在的类名称完全一样。

如何定义一个标准的POJO类？
 * 1.所有的成员变量都需要使用private关键字私有化
 * 2.为每一个成员变量编写一对Getter  Setter方法
 * 3.编写一个无参数的构造方法
 * 4.编写一个全参数的构造方法
POJO：Plain Old Java Object  四个组成部分
特例：布尔类型的 get方法需要写成isXXX；

1.三层架构：
与MVC设计模式的目标一致：都是为了 ，解耦合、提高代码复用；
区别：二者对项目理解的角度不同。
2.三层构成：
（1）表示层（USL，User Show Layer）视图层

--前台：对应于MVC中的View，用于和用户交互，界面的显示
--后台：对应于MVC中的Controller，用于控制跳转、调用业务逻辑层

（2）业务逻辑层（BLL，Business Logic Layer） Service层


（3）数据访问层（DAL，Data Access Layer）Dao层
--直接访问数据库的操作，原子性的操作（增删查改）


session：
1.session存储在服务端；
2.session是在 同一个用户（客户） 请求时共享，即同一个用户可以多次访问。
3.实现机制：第一次客户请求时 产生一个sessionid并复制给cookie的jsessionid然后发给客户端。最终，通过session的sessionid-cookie的jsessionid对应。

session方法;
String getId():获取sessionId
Boolean isNew（） ：判断是否是新用户（第一次访问）
void invalidate（）:使session失效（退出登录、注销）

setAttribute()
getAttribute()

字符串：
注意事项：
1.字符串对象在内存中一旦被创建，那么内容不可以改变。（重点）
2.equals方法：进行内容比较（一定要使用equals方法）
==：进行地址值的相同判断
3.小技巧：如果equals方法需要比较的两个字符串当中，有一个是常量，那么尽量将常量写在前面。 
4.调用方法的时候，对象名当中如果存储的是null值，那么将会发生“空指针异常”，NullPointerException

集合：
与数组类似，也是一种引用类型。区别：数组的长度不变，而集合的长度是可变的（重点）。
基本类型 对应的包装类：
byte	Byte
short 	Short
int	Integer【特殊】
long	Long
float	Float
double	Double
char	Character【特殊】
boolean 	Boolean


IO流：
Java程序（内存）：
断电之后数据消失
硬盘：
断电之后仍然存在
字节流：可以处理任何一种文件数据
字符流：只能处理纯文本文件。

注意事项：
1.不要忘记最后调用close方法关闭；
2.抛异常；
使用循环时注意：字数确定时用for循环，字数不确定使用while循环。
接口：
只要有且仅有一个抽象方法的接口，就是函数式接口。
在Lambda表达式中，凡是可以推导的，都是可以省略的。
1.Lambda表达式当中的参数类型可以省略不写。
2.如果参数只有一个，那么小括号可以省略。
3.如果执行语句只有一个，那么大括号和return也可以省略。
静态方法与成员方法：
1.调用静态方法的格式：
方法名（参数值）；  直接调用本类当中的静态方法
类名称.方法名（参数值）； 调用另外一个类当中的静态方法
2.调用成员方法的格式：
类名称 对象名 = new 类名称（）；  首先创建对象
对象名.成员方法名（参数值） 通过对象名调用成员方法